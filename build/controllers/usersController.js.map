{"version":3,"sources":["../../src/controllers/usersController.js"],"names":["UsersController","req","res","emailValidate","body","email","status","send","success","message","match","password","models","User","findOne","where","then","user","passwordValid","bcrypt","compareSync","token","jwt","sign","id","name","role","process","env","JWT_SECRET","expiresIn","userFound","salt","genSaltSync","hash","hashSync","create","data","userController"],"mappings":"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","file":"usersController.js","sourcesContent":["import models from '../models';\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nclass UsersController {\r\n    signIn(req, res) {\r\n        const emailValidate = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\r\n\r\n        if (!req.body.email) {\r\n            return res.status(400).send({\r\n                success: 'false',\r\n                message: 'Email is required',\r\n            });\r\n        }\r\n        if (!(req.body.email.match(emailValidate))) {\r\n            return res.status(400).send({\r\n                success: 'false',\r\n                message: 'Please enter a valid email address',\r\n            });\r\n        }\r\n        if (!req.body.password) {\r\n            return res.status(400).send({\r\n                success: 'false',\r\n                message: 'Password is required',\r\n            });\r\n        }\r\n        models.User.findOne({ where: { email: req.body.email } }).then((user) => {\r\n            if (!user) {\r\n                return res.status(404).send('No user found.');\r\n            }\r\n            const passwordValid = bcrypt.compareSync(req.body.password, user.password);\r\n            if (!passwordValid) {\r\n                return res.status(401).send({\r\n                    success: false,\r\n                    message: 'Password is incorrect',\r\n                    token: null\r\n                });\r\n            }\r\n            const token = jwt.sign({\r\n                id: user.id,\r\n                name: user.name,\r\n                email: user.email,\r\n                role: user.role,\r\n            }, process.env.JWT_SECRET, { expiresIn: '24h' });\r\n            return res.status(201).send({\r\n                success: 'true',\r\n                message: 'User logged in successfully',\r\n                name: user.name,\r\n                email: user.email,\r\n                token\r\n            });\r\n        }\r\n        );\r\n\r\n    }\r\n    signUp(req, res) {\r\n        const emailValidate = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\r\n\r\n        if (!req.body.name) {\r\n            return res.status(400).send({\r\n                success: 'false',\r\n                message: 'Name is required',\r\n            });\r\n        }\r\n        if (!req.body.email) {\r\n            return res.status(400).send({\r\n                success: 'false',\r\n                message: 'Email is required',\r\n            });\r\n        }\r\n        if (!((req.body.email).match(emailValidate))) {\r\n            return res.status(400).send({\r\n                success: 'false',\r\n                message: 'Please enter a valid email address',\r\n            });\r\n        }\r\n        if (!req.body.password) {\r\n            return res.status(400).send({\r\n                success: 'false',\r\n                message: 'Password is required',\r\n            });\r\n        }\r\n        models.User.findOne({\r\n            where: { email: req.body.email }\r\n        })\r\n            .then((userFound) => {\r\n                if (userFound) {\r\n                    return res.status(403).send({\r\n                        success: 'false',\r\n                        message: 'A user with that email exists already',\r\n                    });\r\n                }\r\n\r\n                const salt = bcrypt.genSaltSync(10);\r\n                const hash = bcrypt.hashSync(req.body.password, salt);\r\n                const user = {\r\n                    name: req.body.name,\r\n                    email: req.body.email,\r\n                    password: hash,\r\n                    role: 1,\r\n                };\r\n                models.User.create(user).then((user) => {\r\n                    var token = jwt.sign({\r\n                        id: req.body.id,\r\n                        name: req.body.name,\r\n                        email: req.body.email,\r\n                        role: req.body.role,\r\n                    }, process.env.JWT_SECRET, { expiresIn: '24h' });\r\n                    return res.status(201).send({\r\n                        success: 'true',\r\n                        message: 'User created successfully',\r\n                        data: user,\r\n                        token\r\n                    });\r\n                });\r\n            });\r\n    }\r\n\r\n}\r\nconst userController = new UsersController();\r\nexport default userController;"]}