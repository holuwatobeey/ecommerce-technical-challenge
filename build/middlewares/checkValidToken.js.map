{"version":3,"sources":["../../src/middlewares/checkValidToken.js"],"names":["req","res","next","token","header","status","json","message","decoded","jwt","verify","process","env","JWT_SECRET","user","exception"],"mappings":";;;;;;AAAA;;;;;;kBAEe,UAACA,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/B,QAAMC,QAAQH,IAAII,MAAJ,CAAW,cAAX,CAAd;AACA,QAAI,CAACD,KAAL,EAAY;AACR,eAAOF,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,qBAAS;AADe,SAArB,CAAP;AAGH;;AAED,QAAI;AACA,YAAMC,UAAUC,uBAAIC,MAAJ,CAAWP,KAAX,EAAkBQ,QAAQC,GAAR,CAAYC,UAA9B,CAAhB;AACAb,YAAIc,IAAJ,GAAWN,OAAX;AACAN;AACH,KAJD,CAIE,OAAOa,SAAP,EAAkB;AAChBd,YAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qBAAS;AADQ,SAArB;AAGH;AACJ,C","file":"checkValidToken.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\n\r\nexport default (req, res, next) => {\r\n    const token = req.header('x-auth-token');\r\n    if (!token) {\r\n        return res.status(401).json({\r\n            message: 'Access denied, no token provided'\r\n        });\r\n    }\r\n\r\n    try {\r\n        const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n        req.user = decoded;\r\n        next();\r\n    } catch (exception) {\r\n        res.status(400).json({\r\n            message: 'Invalid token'\r\n        });\r\n    }\r\n};"]}